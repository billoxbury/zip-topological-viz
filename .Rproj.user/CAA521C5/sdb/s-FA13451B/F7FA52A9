{
    "contents" : "\nsource(\"init.R\")\nsource(\"functions.R\")\n\n###########################################################\n# parameters:\n\nmaxn <- 1000\nndays <- 7\n\n###########################################################\n# get trends...\n\natl <- availableTrendLocations()\nsummary(atl)\ntable(atl$name)\n\n\ncountry <- \"United Kingdom\"\nwoeid <- atl$woeid[atl$country==country]\n( trends <- getTrends(woeid) )\n\n\n###########################################################\n# get tweets by search term from trends...\n\nsearchterms <- trends$name # or choose something else\n\ndates <- interval(ndays) \nsince <- as.character(dates[1]); until <- as.character(dates[2])\ntweets <- lapply(searchterms, function(x) searchTwitter(x, n=maxn, since=since, until=until))\n\ntweets <- do.call(c, tweets)\ntrending.df <- do.call(rbind, lapply(tweets, function(x) as.data.frame(x)))\n\nsummary(trending.df)\n\nsave(trending.df, file=\"trending.Rds\")\nload(\"trending.Rds\")\n\n( ntweets <- nrow(trending.df) )\n\n###########################################################\n# how much duplication is there?\n\n# the tweets are unique:\nlength(unique(tweets)) == ntweets\n\n# but the text isn't:\nlength(trending.df$text); length(unique(trending.df$text))\n\n# look closer;\ntab <- table(trending.df$text)\ntable(tab)\n\ntrending.df$text[tab > 100]\n\n\n###########################################################\n# the users...\n \nusers <- unique( trending.df$screenName )\nuserinfo <- lookupUsers(users)\nuser.df <- do.call(rbind, lapply(userinfo, function(u) as.data.frame(u) ))\n\nsummary(user.df)\n\nsave(user.df, file=\"trendingUsers.Rds\")\n\nload(\"trendingUsers.Rds\")\n\n###########################################################\n# e.g. language:\ntab <- table(user.df$lang)\nbarplot(tab[rev(order(tab))], horiz=TRUE, las=1, col='yellow', log='x', cex.names=1)\n\n# let's take a closer look at some subset of the speakers...\nuser.cond <- (user.df$lang==\"pt\")\n\nuser_subset <- user.df$screenName[user.cond]\ntweet.cond <- (trending.df$screenName %in% user_subset)\nsort( trending.df$text[tweet.cond] )\n\n\n###########################################################\n# tweet devices:\n\nsources <- trending.df$statusSource  #sapply(tweets, function(x) x$getStatusSource())\nsources <- gsub(\"</a>\", \"\", sources)\nsources <- strsplit(sources, \">\")\nsources <- sapply(sources, function(x) ifelse(length(x) > 1, x[2], x[1]))\ntab <- table(sources)\nfiltered_sources <- names(tab[tab < quantile(tab, 0.75)])\nsources[sources %in% filtered_sources] <- \"Other\"\nftab = table(sources)\ntoPlot <- ftab[rev(order(ftab))]\noth <- which(names(toPlot)==\"Other\")\ncol <- rep(\"yellow\", length(toPlot))\ncol[oth] <- \"orange\"\nmai <- par()$mai\npar(mai = c(1,2,1,1)*mai)\nbarplot(toPlot, horiz=TRUE, las=1, col=col, cex.names=0.5)\npar(mai=mai)\n\n############################################################\n# tweet locations:\n\nlat <- trending.df$latitude\nlong <- trending.df$longitude\ncond <- !is.na( as.numeric(lat) ) & !is.na( as.numeric(long) )\nif(sum(cond) > 0){\n  lat <- as.numeric(lat[cond])\n  long <- as.numeric(long[cond])\n  location <- cbind(long, lat)\n  xmin <- min(long); xmax <- max(long)\n  ymin <- min(lat); ymax <- max(lat)\n  newmap <- getMap(resolution = \"low\")\n}\n\n# world:\nplot(newmap, xlim = c(xmin, xmax), ylim = c(ymin, ymax), col='lightgrey')\npoints(location, col = \"red\", pch=19, cex=0.5)\npoints(location, col = \"red\", pch=1, cex=1.0)\npoints(location, col = \"red\", pch=1, cex=1.5)\n\n# uk:\nplot(newmap, xlim = c(-10, 10), ylim = c(40, 70), col='lightgrey')\npoints(location, col = \"red\", pch=19, cex=0.5)\nfor(cex in c(1,1.5,2)) points(location, col = \"red\", pch=1, cex=cex)\n\n# us:\nplot(newmap, xlim = c(-160, -60), ylim = c(35, 40), col='lightgrey')\npoints(location, col = \"red\", pch=19, cex=0.5)\nfor(cex in c(1,1.5,2)) points(location, col = \"red\", pch=1, cex=cex)\n\n# asia:\nplot(newmap, xlim = c(10, 180), ylim = c(30, 60), col='lightgrey')\npoints(location, col = \"red\", pch=19, cex=0.5)\nfor(cex in c(1,1.5,2)) points(location, col = \"red\", pch=1, cex=cex)\n\n\n###########################################################\n# retweet graph:\n\nfrom <- c()\nto <- c()\nrtcount <- c() \n\n#for(x in tweets) {\n#  if(x$isRetweet){\n#    tmp <- strsplit(x$text, ':')[[1]][1]\n#    tmp <- strsplit(tmp, ' @')[[1]][2]\n#    from <- c(from, x$screenName)\n#    to <- c(to, tmp)\n#    rtcount <- c(rtcount, x$retweetCount)\n#  } \n#}\n\nfor(i in 1:ntweets){\n  if(trending.df$isRetweet[i]){\n    tmp <- strsplit(trending.df$text[i], ':')[[1]][1]\n    tmp <- strsplit(tmp, ' @')[[1]][2]\n    from <- c(from, trending.df$screenName[i])\n    to <- c(to, tmp)\n    rtcount <- c(rtcount, trending.df$retweetCount[i])\n  }\n}\n\nedges <- data.frame(to, from, rtcount)\ng <- graph.edgelist(as.matrix(edges[,1:2]))\nV(g)$color = 'red'\nV(g)$frame.color = 'white'\nV(g)$size = 2*(1 + log(degree(g)))\nV(g)$label.cex = 0.5\nV(g)$label = \"\"\nE(g)$curved = TRUE\nE(g)$width <- 1 + log(edges[,3])\nE(g)$arrow.mode = 2\nE(g)$arrow.size = 0.5\nE(g)$arrow.width <- 0.5\nplot(g)\n\n# giant component:\ncc <- clusters(g)\ntab <- table(cc$membership)\ngidx <- which(tab==max(tab))\ngiantv <- which(cc$membership==gidx)\ngiant <- induced.subgraph(g, giantv)\n\nplot(giant, layout=layout.kamada.kawai)\n\n###########################################################\n# favorited tweets:\n\nidx <- 1:ntweets\nfav <- sapply(idx, function(i) tweets[[i]]$favorited)\nsum(fav)\n\n###########################################################\n# build followers graph...\n\n\nfollowerDF <- function(user){\n  if(user$protected){ \n    cat(sprintf(\"User '%s' is protected\", user$screenName))\n    out <- NULL\n  } else {\n    foll <- user$getFollowers()\n    tmp <- lapply(foll, function(x) as.data.frame(x))\n    out <- do.call(rbind, tmp)\n  }\n  # return:\n  out\n}\n\nreid <- getUser(\"reid24hrs\")\nreid.foll <- followerDF(reid)\n\nphil <- getUser(\"tescophil\")\nphil.foll <- followerDF(phil)\n\nbill <- getUser(\"box121209\")\nbill.foll <- followerDF(bill)\n\ncount <- 0\nbill.folls <- list() \nthreshold <- 1000\nfor(i in 1:bill$followersCount){\n  if(bill.foll$followersCount[i] < threshold){\n    whoami <- bill.foll$screenName[i]\n    cat(whoami, '\\n')\n    user <- getUser(whoami)\n    count <- count + 1\n    tmp <- followerDF(user)\n    bill.folls[[count]] <- cbind( tmp, rep(whoami, nrow(tmp)))\n  }\n}\n\n\n\nif (user$followersCount >= threshold)\n\n\n\n\n\n\nfollowerDF <- function(username, threshold=1000){\n  cat(username, '\\n')\n  user <- getUser(username)\n  if(user$protected){\n    fname <- username\n    uname <- username\n    fdegree <- 0\n    floc <- \"\"\n  } else if (user$followersCount >= threshold){\n    fname <- username\n    uname <- username\n    fdegree <- Inf\n    floc <- \"\"\n  } else {\n    followers <- user$getFollowers()\n    fname <- sapply(followers, function(x) x$screenName)\n    uname <- rep(username, length(fname))\n    fdegree <- sapply(followers, function(x) as.numeric(x$followersCount))\n    floc <- sapply(followers, function(x) x$location)\n  }\n  data.frame( fdegree, fname, uname, floc )\n}\n  \nbill.\n\nbill.foll <- followerDF(\"box121209\")\n\ntmp1 <- lookupUsers(bill.foll$fname)\ntmp2 <- lapply(tmp1, function(x) if(x$followersCount < 500) x$getFollowers() else list())\n  \n  \n\n\n",
    "created" : 1442158408790.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2616868486",
    "id" : "F7FA52A9",
    "lastKnownWriteTime" : 1442219565,
    "path" : "~/Blog/ec2/_INPROGRESS_twitter/twitter_expt.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}