st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex="size", alpha=0.5)
geo_pts %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
geo_pts <- dat %>% select(lat=`Latitude (WGS84)`, lng=`Longitude (WGS84)`, osgr = `OSGR`) %>%
group_by(osgr, lat, lng) %>%
summarize(count = n())
geo_pts %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
dat
geo_pts %>% select(count)
library(ggplot2)
# frequency with geo:
geo_pts %>% select(count) %>%
geo_histogram()
# frequency with geo:
geo_pts %>% select(count) %>%
geom_histogram()
# frequency with geo:
geo_pts %>%
ggplot(aes(x=count)) +
geom_histogram()
# frequency with geo:
geo_pts %>%
ggplot(aes(x=count)) +
geom_histogram(color="blue", fill="white")
# frequency with geo:
geo_pts %>%
ggplot(aes(x=count)) +
geom_histogram(color="blue", fill="lightblue", binwidth=1)
?mapview
geo_pts %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5, color="count")
geo_pts %>%
select(count < 20)
geo_pts %>%
filter(count < 20)
geo_pts %>%
filter(count < 20) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count > 20) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count < 20) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count > 20) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
?filter
geo_pnts
geo_pts
geo_pts %>%
filter(count > 20)
geo_pts %>%
filter(count < 20)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count == 20) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count == 2) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count == 3) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count == 30) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count == 40) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count > 40) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count >= 40) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count == 40) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count == 41) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count == 50) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count >= 50) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
?filter
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count >= 60) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
# distribution of the record count over tetrads
geo_pts %>%
ggplot(aes(x=count)) +
geom_histogram(color="blue", fill="lightblue", binwidth=1)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count >= 90) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count < 5) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count < 4) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count < 3) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count < 20) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count > 30) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count > 20 & count < 30) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count > 30 & count < 40) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count > 30 & count <= 40) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count >= 30 & count < 40) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
geo_pts %>%
filter(count >= 40 & count < 50) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 0
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 10
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 0
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 10
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 20
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 30
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 40
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 50
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 60
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 70
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 80
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
#  which looks like two distinct clusters of tetrads ...
b <- 90
geo_pts %>%
filter(count >= b & count < b + 10) %>%
st_as_sf(coords = c("lng", "lat"), crs = 4326) %>%
mapview(cex=0.5, alpha=0.5)
shiny::runApp('202201_text_vector_viz')
runApp('202201_text_vector_viz')
runApp('202201_text_vector_viz')
runApp('202201_text_vector_viz')
rep(FALSE, 3)
runApp('202201_text_vector_viz')
shiny::runApp('202201_Text_Explorer/tx')
install.packages('revtools')
Sys.getenv("RSTUDIO_PANDOC")
shiny::runApp('202201_BI_literature_scanning/blitscan/webapp')
library(rvest, warn.conflicts=FALSE)
library(stringr, warn.conflicts=FALSE)
library(dplyr, warn.conflicts=FALSE)
library(purrr, warn.conflicts=FALSE)
library(readr, warn.conflicts=FALSE)
library(lubridate, warn.conflicts=FALSE)
library(oai, warn.conflicts=FALSE)
library(rcrossref, warn.conflicts=FALSE)
# earliest date for responses
MAXDAYSAGO <- 2200
FROM <- today() - MAXDAYSAGO
# get response from database
get_page <- function(database, request){
url_name <- str_c(database, request)
url_conn <-  url(url_name, "rb")
page <- read_html(url_conn)
close(url_conn)
# return
page
}
database_to_table <- function(database, setname, from = FROM){
# sets minimum date
request <- sprintf("?verb=ListRecords&metadataPrefix=oai_dc&set=%s&from=%s",
setname,
from)
page <- get_page(database, request)
# (ListRecords request) get title/description etc
nodes <- page %>%
html_elements('record metadata dc')
title <- nodes %>%
html_elements('title') %>%
html_text2()
source <- nodes %>%
html_elements('source') %>%
html_text2()
description <- nodes %>%
html_elements('description') %>%
html_text2()
date <- nodes %>%
html_elements('date') %>%
html_text2()
language <- nodes %>%
html_elements('language') %>%
html_text2()
# return
tibble(source,
date,
title,
description,
language)
}
bioone <- "https://bioone.org/action/oai"
bioone_avian_sets <- c(17, 28, 30, 39, 52,
103, 104, 108,110, 120,
142, 143, 151, 156, 157,
158, 159)
# request set names
request <- "?verb=ListSets"
page <- get_page(bioone, request)
page
setnames <- page %>%
html_elements('setname') %>%
html_text2()
setspecs <- page %>%
html_elements('setspec') %>%
html_text2()
setnames
setspecs
sets = bioone_avian_sets
database <- "https://bioone.org/action/oai"
domain <- str_remove(database, 'https://')
df <- tibble(
source = character(),
domain = character(),
date = character(),
society = character(),
title = character(),
description = character(),
language = character()
)
for(set in sets){
nextdf <- database_to_table(database, setspecs[set])
# exclude rows with no description - these are usually of no interest
nextdf <- nextdf[nextdf$description != '', ]
nextdf['society'] <- setnames[set]
nextdf['domain'] <- domain
df <- rbind(df, nextdf)
cat(sprintf("%s: %d\n", setnames[set], nrow(df)))
}
# return
df
# return
df_oai <- df
datafile <- "data/master.csv"
df_master <- read_csv(datafile, show_col_types = FALSE)
datafile <- "/Volumes/blitshare/master.csv"
df_master <- read_csv(datafile, show_col_types = FALSE)
bioone_source_file <- /Volumes/blitshare/oai_bioone_sources.csv
bioone_source_file <- "/Volumes/blitshare/oai_bioone_sources.csv"
########################################################
# boilerplate normalisation of master data frame
df_master$date <- df_master$date %>% as.character()
df_master <- df_master %>% mutate(date = as.character(date),
query_date = as_date(query_date))
# normalise the 'domain' field
df_master$domain <- df_master$domain %>% str_remove('^www\\.')
# earliest date for responses
MAXDAYSAGO <- 2200
FROM <- today() - MAXDAYSAGO
# get response from database
get_page <- function(database, request){
url_name <- str_c(database, request)
url_conn <-  url(url_name, "rb")
page <- read_html(url_conn)
close(url_conn)
# return
page
}
database_to_table <- function(database, setname, from = FROM){
# sets minimum date
request <- sprintf("?verb=ListRecords&metadataPrefix=oai_dc&set=%s&from=%s",
setname,
from)
page <- get_page(database, request)
# (ListRecords request) get title/description etc
nodes <- page %>%
html_elements('record metadata dc')
title <- nodes %>%
html_elements('title') %>%
html_text2()
source <- nodes %>%
html_elements('source') %>%
html_text2()
description <- nodes %>%
html_elements('description') %>%
html_text2()
date <- nodes %>%
html_elements('date') %>%
html_text2()
language <- nodes %>%
html_elements('language') %>%
html_text2()
# return
tibble(source,
date,
title,
description,
language)
}
bioone <- "https://bioone.org/action/oai"
bioone_avian_sets <- c(17, 28, 30, 39, 52,
103, 104, 108,110, 120,
142, 143, 151, 156, 157,
158, 159)
# request set names
request <- "?verb=ListSets"
setnames
bioone <- "https://bioone.org/action/oai"
bioone_avian_sets <- c(13, 16, 17, 28, 30, 32, 33, 39, 52,
62, 63, 97, 98, 103, 104, 108, 110, 117, 120,
121, 132, 137, 141, 142, 143, 144, 151, 156, 157,
158, 159)
# main BioOne scanner
scan_bioone <- function(sets = bioone_avian_sets){
database <- "https://bioone.org/action/oai"
domain <- str_remove(database, 'https://')
df <- tibble(
source = character(),
domain = character(),
date = character(),
society = character(),
title = character(),
description = character(),
language = character()
)
for(set in sets){
nextdf <- database_to_table(database, setspecs[set])
# exclude rows with no description - these are usually of no interest
nextdf <- nextdf[nextdf$description != '', ]
nextdf['society'] <- setnames[set]
nextdf['domain'] <- domain
df <- rbind(df, nextdf)
cat(sprintf("%s: %d\n", setnames[set], nrow(df)))
}
# return
df
}
df_oai <- scan_bioone(bioone_avian_sets)
df_oai
df_oai$source
setnames[bioone_avian_sets]
names(df_oai)
df_oai$language
names(df_oai)
df_oai$language %>% unique()
df_oai$society %>% unique()
df_oai$domain %>% unique()
df_oai$source %>% unique()
df_oai$description %>% unique()
request <- "/Search?term=buteo&startYear=2016&endYear=2022"
page <- get_page(bioone, request)
library(rvest, warn.conflicts=FALSE)
library(stringr, warn.conflicts=FALSE)
library(dplyr, warn.conflicts=FALSE)
library(purrr, warn.conflicts=FALSE)
library(readr, warn.conflicts=FALSE)
library(lubridate, warn.conflicts=FALSE)
library(oai, warn.conflicts=FALSE)
library(rcrossref, warn.conflicts=FALSE)
shiny::runApp('~/Blog/R/zip')
install.packages('ElemStatLearn')
getwd()
setwd("~/Blog/R/zip")
?open
open('data/zip.train.RData')
load('data/zip.train.RData')
View(zip.train)
library(igraph)
load('data/zip.train.RData')
x <- zip.train[,-1]
y <- zip.train[,1]
# for zip data:
row2image <- function(line) {
im <- t(matrix(line, 16, 16, byrow = TRUE))
# return:
im[, 16:1]
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
